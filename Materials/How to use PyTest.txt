1. Install PyTest:
pip install pytest==3.10.1

2. pytest rules (https://docs.pytest.org/en/latest/goodpractices.html#conventions-for-python-test-discovery):
 * if it's started without arguments, looks for tests in current directory and all subdirectories
 * if it's started with a path to a directory, looks for tests in the directory and all subdirectories
 * test files are "test_*.py" or "*_test.py"
 * test methods have to start from "test"
 * if test method is inside of a class, the class have to start with "Test" (and without "__init__" method)

3. Setup and teardown methods:
 * @classmethod
   def setup_class(cls):
 * @classmethod
   def teardown_class(cls):
 * def setup_method(self):
 * def teardown_method(self):

4. Simple fixture:
@pytest.fixture
def browser():
    print("\nstart browser for test..")
    browser = webdriver.Chrome()
    return browser

5. Fixture with finalizer:
@pytest.fixture
def browser():
    print("\nstart browser for test..")
    browser = webdriver.Chrome()
    yield browser
    # этот код выполнится после завершения теста
    print("\nquit browser..")
    browser.quit()

6. Fixture can have scope: "function", "class", "module", "session". 
@pytest.fixture(scope="class")

7. "autouse=True" to call fixture even if it's not an argument of a function:
@pytest.fixture(autouse=True)
def prepare_data():
    print("preparing some critical data for every test")

8. Tests can be marked with any labels and pytest can run tests which are marked by some labels (e.g. smoke, regression):
@pytest.mark.smoke
def test_guest_should_see_login_link(self, browser):

@pytest.mark.regression
    def test_guest_should_see_basket_link_on_the_main_page(self, browser):
        browser.get(link)
        browser.find_element_by_css_selector("#login_link")

pytest -s -v -m smoke test_fixture8.py
pytest -s -v -m "not smoke" test_fixture8.py
pytest -s -v -m "smoke or regression" test_fixture8.py
pytest -s -v -m "smoke and win10" test_fixture81.py

9. Tests can be marked to be skipped (with or without a reason; use "pytest -rsx" to see reasons):
@pytest.mark.skip(reason="no way of currently testing this")
def test_guest_should_see_login_link(self, browser):

10. Use "xfail" to mark tests as expected to fail (https://docs.pytest.org/en/latest/skipping.html#xfail-mark-test-functions-as-expected-to-fail)
@pytest.mark.xfail(reason="fixing this bug right now")
def test_guest_should_see_login_link(self, browser):

11. "strict=True" can be used to fail a test which is marked by "xfail" but was passed successfully:
@pytest.mark.xfail(strict=True)
def test_function():

12. Tests can be parametrized:
@pytest.mark.parametrize('language', ["ru", "en-gb"])
def test_guest_should_see_login_link(browser, language):

13. All common fixtures can be defined in conftest.py (in a root directory or in any subdirectories)

14. Here is how to parse an command line option:
def pytest_addoption(parser):
    parser.addoption('--browser_name', action='store', default=None,
                     help="Choose browser: chrome or firefox")

@pytest.fixture(scope="function")
def browser(request):
    browser_name = request.config.getoption("browser_name")

15. Unstable tests can be rerun:
 * Need to install additional package: pip install pytest-rerunfailures==3.1
 * Use next option (n is a number of reruns): "pytest --reruns n"

16. Set default browser language:
from selenium.webdriver.chrome.options import Options

options = Options()
options.add_experimental_option('prefs', {'intl.accept_languages': user_language})
browser = webdriver.Chrome(options=options)